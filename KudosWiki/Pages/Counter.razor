@page "/counter"
@using System.Net
@using System.Net.Http;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;
<!--@using Microsoft.Security.Application;-->
@inject HttpClient Http;

<PageTitle>Barcode Scanners</PageTitle>

<h1>Hardware: <small class="text-muted">Barcode Scanners</small></h1>
<div>
    @if (contentHolderList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        var count = 0;
        <table class="table table-success table-striped">
            <thead>
                <tr>
                    <th>Page</th>
                    <th>Section</th>
                    <th>Content</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var contentHolder in contentHolderList)
                {
                    Console.WriteLine("count before table " + count);
                    <tr hidden="@IsEditing[count]">
                        <td>@contentHolder.page</td>
                        <td>@contentHolder.section</td>
                        <td>@(new MarkupString(@contentHolder.content))</td>
                    </tr>
                    Console.WriteLine("count in middle of table " + count);
                    <tr>
                        <div class="dotted-lines" hidden="@(!IsEditing[count])">
                            <Editor
                                Id="@count.ToString()"
                                Inline=false
                                CloudChannel="5"
                                Disable=false
                                Conf="@editorConf"
                                ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                ClassName="counterEditor"
                                @bind-Value=(contentHolder.content)
                            /> 
                        </div>
                    </tr>
                    Console.WriteLine("count before buttons " + count);
                    int localCount = count;
                    <tr>
                        <td><button class="btn btn-outline-primary" @onclick="(() => ClearContent(localCount))">Clear</button>
                        <button class="btn btn-outline-primary" @onclick="(() => Edit(localCount))" hidden="@IsEditing[count]">Edit</button>
                        <button class="btn btn-outline-primary" @onclick="(() => Save(localCount))" hidden="@(!IsEditing[count])">Save</button>
                        <button class="btn btn-outline-primary" @onclick="(() => Cancel(localCount))" hidden="@(!IsEditing[count])">Cancel</button></td>
                    </tr>
                    Console.WriteLine("count after buttons " + count);
                    count++;
                }
            </tbody>
        </table>
    }
</div>

@code {
    private contentHolder[]? contentHolderList;

    private string[] initialContent;
    //private string content { get; set; }
    private bool[] IsEditing;
    private string repoName = "WikiData";
    private string userName = "SamDenton";
    private string token = "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";
    private string commitText = "Test From Wiki";
    private string newSHA;

    protected override async Task OnInitializedAsync()
    {
        contentHolderList = await GetContentFromGitHubRepo<contentHolder>(userName, repoName, token);
        initialContent = new string[contentHolderList.Length];
        IsEditing = new bool[contentHolderList.Length];
        Console.WriteLine("Content length: " + contentHolderList.Length);
        for (int i = 0;i < contentHolderList.Length; i++) {
            IsEditing[0] = false;
        }
        Console.WriteLine("edditing length: " + IsEditing.Length);
        base.OnInitialized();
    }

    private void ClearContent(int sectionNo)
    {
        contentHolderList[sectionNo].content = "";
    }

    private void Edit(int sectionNo)
    {
        Console.WriteLine(sectionNo);
        initialContent[sectionNo] = contentHolderList[sectionNo].content;
        IsEditing[sectionNo] = true;
    }

    private async void Save(int sectionNo)
    {
        IsEditing[sectionNo] = false;
        //await DeleteFile(repoName, userName, token, commitText, newSHA);
        // Serialize the contentObjectList to a JSON string
        var jsonString = JsonConvert.SerializeObject(contentHolderList);
        //PUT to github
        await UpdateJSONOnGitHub(jsonString, repoName, userName, token, commitText, newSHA);
    }
    //github token: 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

    private void Cancel(int sectionNo)
    {
        contentHolderList[sectionNo].content = initialContent[sectionNo];
        IsEditing[sectionNo] = false;
    }

    private async Task UpdateJSONOnGitHub(string jsonString, string repositoryName, string username, string token, string commitMessage, string sha)
    {
        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", token);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.github+json"));

            var body = new
            {
                message = commitMessage,
                content = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString)),
                sha = sha
            };
            var json = JsonConvert.SerializeObject(body);
            var contentAndMessage = new StringContent(json, Encoding.UTF8, "application/json");

            // Send the PUT request
            var response = await client.PutAsync($"https://api.github.com/repos/{username}/{repositoryName}/contents/data.json", contentAndMessage);
            var responceHeaders = await response.Content.ReadAsStringAsync();
            var gitContent = JsonConvert.DeserializeObject<Root>(responceHeaders);
            newSHA = gitContent.content.sha;
            Console.WriteLine("new sha value: " + newSHA);
            response.EnsureSuccessStatusCode();
        }
    }

    public async Task<T[]> GetContentFromGitHubRepo<T>(string username, string repositoryName, string token)
    {
        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", token);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.github+json"));
            var response = await client.GetAsync($"https://api.github.com/repos/{username}/{repositoryName}/contents/data.json");

            var content = await response.Content.ReadAsStringAsync();
            var gitContent = JsonConvert.DeserializeObject<Content>(content);
            var contentBytes = Convert.FromBase64String(gitContent.content);
            var jsonContent = Encoding.UTF8.GetString(contentBytes);
            var array = JsonConvert.DeserializeObject<T[]>(jsonContent);
            //var newSHABytes = Convert.FromBase64String(gitContent.sha);
            //newSHA = Encoding.UTF8.GetString(newSHABytes);
            newSHA = gitContent.sha;
            return array;
        }
    }

    private async Task DeleteFile(string repositoryName, string username, string token, string commitMessage, string sha)
    {
        var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", token);
        var content = new StringContent("{\"message\":\"" + commitMessage + "\",\"sha\":\"" + sha + "\"}", Encoding.UTF8, "application/json");
        var response = await client.DeleteAsync($"https://api.github.com/repos/{username}/{repositoryName}/contents/data.json");
        if (!response.IsSuccessStatusCode)
        {
            throw new Exception("Error deleting file: " + response.ReasonPhrase);
        }
    }


    public class contentHolder
    {
        public string? page { get; set; }

        public string? section { get; set; }

        public string? content { get; set; }
    }

    public class Content
    {
        public string content { get; set; }
        public string encoding { get; set; }
        public int size { get; set; }
        public string sha { get; set; }
    }

    public class Root
    {
        public PutResponse content { get; set; }
    }
    public class PutResponse
    {
        public string sha { get; set; }
        public string content { get; set; }
        public string commit { get; set; }
        public string url { get; set; }
    }

    private Dictionary<string, object> editorConf = new Dictionary<string, object>  {
        {"menubar", "edit insert format table tools help"},
        {"toolbar", "undo redo | bold italic underline strikethrough | fontfamily fontsize blocks | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl"},
        {"plugins", "link image imagetools spellchecker table lists advlist code emoticons wordcount importcss "},
        {"contextmenu", "link image imagetools table spellchecker lists"},
        {"table_toolbar", "tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol"},
        {"width", 900},
        {"height", 200},
        {"skin", "oxide-dark"},
        {"content_css", "dark"},
        {"autosave_ask_before_unload", "true"},
        {"resize", "both"}
    };
}
