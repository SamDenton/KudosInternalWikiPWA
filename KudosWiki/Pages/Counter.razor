@page "/counter"
@using System.Net
@using System.Net.Http;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;
@inject HttpClient Http;

<PageTitle>Barcode Scanners</PageTitle>
<!--Still not sure if I want 2-3 pages total with sections, or a page for each section-->
<!--Either way, I think i will need a different JSON file for each page-->
<h1>Hardware: <small class="text-muted">Barcode Scanners</small></h1>
<div>
    @if (contentHolderList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        var count = 0;
        <table class="table table-dark table-striped">
            <thead>
                <tr>
                    <th class="col-1">Section</th>
                    <th>Content</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var contentHolder in contentHolderList)
                {
                    <tr>
                        <td><p>@contentHolder.page: <small class="text-muted">@contentHolder.section</small></p></td>

                        <td hidden="@IsEditing[count]">@(new MarkupString(@contentHolder.content))</td>

                        <td hidden="@(!IsEditing[count])"><div class="dotted-lines">
                            <Editor
                                Id="@count.ToString()"
                                Inline=false
                                CloudChannel="5"
                                Disable=false
                                Conf="@editorConf"
                                ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                ClassName="counterEditor"
                                @bind-Value=(contentHolder.content)
                            /> 
                        </div></td>
                    </tr>
                    int localCount = count;
                    <tr>
                        <td>

                        </td>
                        <td><button class="btn btn-outline-primary" @onclick="(() => ClearContent(localCount))">Clear</button>
                        <button class="btn btn-outline-primary" @onclick="(() => RemoveSection(localCount))">Delete</button>
                        <button class="btn btn-outline-primary" @onclick="(() => Edit(localCount))" hidden="@IsEditing[count]">Edit</button>
                        <button class="btn btn-outline-primary" @onclick="(() => Save(localCount))" hidden="@(!IsEditing[count])">Save</button>
                        <button class="btn btn-outline-primary" @onclick="(() => Cancel(localCount))" hidden="@(!IsEditing[count])">Cancel</button></td>
                    </tr>
                    count++;
                }
            </tbody>
        </table>
    }
    <div class="form-group">
        <label for="sectionDropdown">Select New Section Type:</label>
        <select class="form-control" id="sectionDropdown" @bind="sectionDropdown">
            <option value="Hardware">Hardware</option>
            <option value="Software">Software</option>
            <option value="Misc">Misc</option>
        </select>
    </div>

    <div class="form-group">
        <label for="sectionContent">Section Name:</label>
        <input type="text" class="form-control" id="sectionContent" placeholder="Name of the new section" @bind="sectionName">
    </div>
    <button class="btn btn-outline-primary" @onclick="(() => AddNewSection())">Add New Section</button>
</div>

@code {
    private contentHolder[]? contentHolderList;

    private string[] initialContent;
    private bool[] IsEditing;
    private string repoName = "WikiData";
    private string userName = "SamDenton";
    private string sectionDropdown;
    private string sectionName;
    private string token;
    private string commitText = "Test From Wiki";
    private string newSHA; 


    protected override async Task OnInitializedAsync()
    {
        var getFromTokens = await Http.GetAsync("Token.txt");
        token = await getFromTokens.Content.ReadAsStringAsync();
        contentHolderList = await GetContentFromGitHubRepo<contentHolder>(userName, repoName, token);
        initialContent = new string[contentHolderList.Length];
        IsEditing = new bool[contentHolderList.Length];
        base.OnInitialized();
    }

    private void ClearContent(int sectionNo)
    {
        contentHolderList[sectionNo].content = "";
    }

    private void Edit(int sectionNo)
    {
        Console.WriteLine(sectionNo);
        initialContent[sectionNo] = contentHolderList[sectionNo].content;
        IsEditing[sectionNo] = true;
    }

    private async void Save(int sectionNo)
    {
        IsEditing[sectionNo] = false;
        //await DeleteFile(repoName, userName, token, commitText, newSHA);
        // Serialize the contentObjectList to a JSON string
        var jsonString = JsonConvert.SerializeObject(contentHolderList);
        //PUT to github
        await UpdateJSONOnGitHub(jsonString, repoName, userName, token, commitText, newSHA);
    }
    //github token: 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

    private void Cancel(int sectionNo)
    {
        if (initialContent[sectionNo] != null)
        {
            contentHolderList[sectionNo].content = initialContent[sectionNo];
        }
        else
        {
            RemoveSection(contentHolderList.Length - 1);
        }
        IsEditing[sectionNo] = false;
    }

    private void AddNewSection()
    {
        //code to add a new section to my JSON string

        var type = sectionDropdown;
        var name = sectionName;

        Array.Resize(ref contentHolderList, contentHolderList.Length + 1);
        contentHolderList[contentHolderList.Length - 1] = new contentHolder { 
            page = type, 
            section = name, 
            content = "<p>Enter some details about " + name + " here.</p>" 
        };

        ReInitialize();
        IsEditing[contentHolderList.Length - 1] = true;
    }

    private async Task RemoveSection(int sectionNo)
    {
        contentHolder[] newArray = new contentHolder[contentHolderList.Length - 1];
        int newArrayIndex = 0;
        for (int i = 0; i < contentHolderList.Length; i++)
        {
            if (i != sectionNo)
            {
                newArray[newArrayIndex++] = contentHolderList[i];
            }
        }
        contentHolderList = newArray;
        ReInitialize();

        var jsonString = JsonConvert.SerializeObject(contentHolderList);
        //PUT to github
        await UpdateJSONOnGitHub(jsonString, repoName, userName, token, commitText, newSHA);
    }
    //This method should reset lengths of different variabes and re-load the page
    private void ReInitialize()
    {
        initialContent = new string[contentHolderList.Length];
        IsEditing = new bool[contentHolderList.Length];
        StateHasChanged();
    }

    private async Task UpdateJSONOnGitHub(string jsonString, string repositoryName, string username, string token, string commitMessage, string sha)
    {
        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", token);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.github+json"));

            var body = new
            {
                message = commitMessage,
                content = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString)),
                sha = sha
            };
            var json = JsonConvert.SerializeObject(body);
            var contentAndMessage = new StringContent(json, Encoding.UTF8, "application/json");

            // Send the PUT request
            var response = await client.PutAsync($"https://api.github.com/repos/{username}/{repositoryName}/contents/data.json", contentAndMessage);
            var responceHeaders = await response.Content.ReadAsStringAsync();
            var gitContent = JsonConvert.DeserializeObject<Root>(responceHeaders);
            newSHA = gitContent.content.sha;
            response.EnsureSuccessStatusCode();
        }
    }

    public async Task<T[]> GetContentFromGitHubRepo<T>(string username, string repositoryName, string token)
    {
        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", token);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.github+json"));
            var response = await client.GetAsync($"https://api.github.com/repos/{username}/{repositoryName}/contents/data.json");

            var content = await response.Content.ReadAsStringAsync();
            var gitContent = JsonConvert.DeserializeObject<Content>(content);
            var contentBytes = Convert.FromBase64String(gitContent.content);
            var jsonContent = Encoding.UTF8.GetString(contentBytes);
            var array = JsonConvert.DeserializeObject<T[]>(jsonContent);
            //var newSHABytes = Convert.FromBase64String(gitContent.sha);
            //newSHA = Encoding.UTF8.GetString(newSHABytes);
            newSHA = gitContent.sha;
            return array;
        }
    }

    private async Task DeleteFile(string repositoryName, string username, string token, string commitMessage, string sha)
    {
        var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", token);
        var content = new StringContent("{\"message\":\"" + commitMessage + "\",\"sha\":\"" + sha + "\"}", Encoding.UTF8, "application/json");
        var response = await client.DeleteAsync($"https://api.github.com/repos/{username}/{repositoryName}/contents/data.json");
        if (!response.IsSuccessStatusCode)
        {
            throw new Exception("Error deleting file: " + response.ReasonPhrase);
        }
    }


    public class contentHolder
    {
        public string? page { get; set; }

        public string? section { get; set; }

        public string? content { get; set; }
    }

    public class Content
    {
        public string content { get; set; }
        public string encoding { get; set; }
        public int size { get; set; }
        public string sha { get; set; }
    }

    public class Root
    {
        public PutResponse content { get; set; }
    }
    public class PutResponse
    {
        public string sha { get; set; }
        public string content { get; set; }
        public string commit { get; set; }
        public string url { get; set; }
    }

    private Dictionary<string, object> editorConf = new Dictionary<string, object>  {
        {"menubar", "edit insert format table tools help"},
        {"toolbar", "undo redo | bold italic underline strikethrough | fontfamily fontsize blocks | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl"},
        {"plugins", "link image table lists advlist code emoticons wordcount importcss autoresize"}, //imagetools spellchecker - Removed as imagetools now premium and spellchecker depricated
        {"contextmenu", "link image imagetools table spellchecker lists"},
        {"table_toolbar", "tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol"},
        {"width", "100%"},
        {"min_width", "100%"},
        {"height", "100%"},
        {"min_height", 100},
        {"autoresize_bottom_margin", 50},
        {"skin", "oxide-dark"},
        {"content_css", "dark"},
        {"autosave_ask_before_unload", "true"},
        {"resize", "both"}
    };
}
