@page "/mainContent/{type}/{sections?}"
@using System.Net
@using System.Net.Http;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;
@inject HttpClient Http;
@inject NavigationManager Navigation;
@inject MyStateContainer myStateContainer
@* Using Authorize View to only load content when user is authenticated.  If not logged in, they should be redirected to a Microsoft authenticator *@
<AuthorizeView>
    <Authorized>
        <PageTitle>Content</PageTitle>
        <div class="container-fluid mx-0 ps-0">
            <div class="row mx-0 ps-0 gx-3">
                <div class="col-1 mx-0 ps-0">
                    @if (contentHolderList == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <table class="table table-dark table-hover table-bordered align-middle sticky-top pt-5"> @* table-sm text-center *@
                            <thead style="background-color: #0d1f5b !important"> @* class="table-secondary" *@
                                <tr>
                                    <th><u>Section List</u></th>
                                </tr>
                            </thead>
                            <tbody class="table-group-divider">
                                <tr><td><a onclick="@(() => navigateToSection("all", null))">All Sections</a></td></tr>
                                @* Should add some code here so each type is seporated by a header *@
                                @foreach (var contentHolder in contentHolderList)
                                {
                                    <tr><td><a onclick="@(() => navigateToSection(@contentHolder.page!, @contentHolder.section!))"><p>@contentHolder.section</p></a></td></tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
                <div class="col-11">
                    <div class="row">
                        <div class="col">
                            <div class="form-group form-check form-switch">
                                <input type="checkbox" class="form-check-input" id="sliderToggle" @bind="inline" @onclick="(() => ClearIsEditingArray())" />
                                <label class="form-check-label" for="sliderToggle">Switch Between Inline and Full Editor</label>
                            </div>
                            <div class="input-group mb-3">
                                <input class="form-control" placeholder="Search" @bind="searchTerm" @bind:event="oninput" @onkeyup="SearchTermChanged" >
                                <!-- <button class="btn btn-outline-primary" type="button" @onclick="(() => Search(searchTerm))">Toggle Search</button> -->
                            </div>
                            @if (type != "all")
                            {
                                <h1>@type: <small class="text-muted">@sections </small></h1>
                            }
                            @* Show a loading message before API call is complete *@
                            @* Might add a timer so it displays a different message if the request takes too long *@
                            @* Should also add failure case if the API call returns 404 *@
                            @if (contentHolderList == null)
                            {
                                <p><em>Loading...</em></p>
                            }
                            else
                            {
                                var count = 0;
                                var countAll = 0;
                                var clearText = "";
                                var username = @context.User.Identity!.Name;
                                <table class="table table-dark table-striped">
                                    <thead>
                                        <tr>
                                            <th class="col-1">Section</th>
                                            <th>Content</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @* Pragmatically populate the table using my customer object array *@
                                        @foreach (var contentHolder in contentHolderList)
                                        {
                                            @if (type == contentHolder.page && sections == contentHolder.section)
                                            {
                                                if (inline == true)
                                                {
                                                    var localCount = count;
                                                    <tr>
                                                        @* Currently showing all details about the section, but once I split into multiple pages, this will likley be hidden *@
                                                        <td><p>@contentHolder.page: <small class="text-muted">@contentHolder.section</small></p></td>
                                                        @* When IsEditing is true, render the WYSIWYG editor, i'm using TinyMCE *@
                                                        <td><div class="dotted-lines" @onfocusout="(() => Save(localCount, username!))">
                                                            <Editor
                                                                Id="@count.ToString()"
                                                                Inline=true
                                                                CloudChannel="5"
                                                                Disable=false
                                                                Conf="@editorConfInline"
                                                                ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                                                ClassName="counterEditor"
                                                                @bind-Value=(contentHolder.content)
                                                            /> 
                                                        </div></td>
                                                    </tr>
                                                }
                                                else
                                                {
                                                    <tr>
                                                        @* Currently showing all details about the section, but once I split into multiple pages, this will likley be hidden *@
                                                        <td><p>@contentHolder.page: <small class="text-muted">@contentHolder.section</small></p></td>
                                                        @* Render the de-serialized JSON string as HTML, including styling.  I need some sanitisation here but AntiXss from Microsoft is broken ATM... *@
                                                        <td hidden="@IsEditing![count]">@(new MarkupString(@contentHolder.content!))</td>
                                                        @* When IsEditing is true, render the WYSIWYG editor, i'm using TinyMCE *@
                                                        <td hidden="@(!IsEditing[count])"><div class="dotted-lines tinymce-editor">
                                                            <Editor
                                                                Id="@count.ToString()"
                                                                Inline=false
                                                                CloudChannel="5"
                                                                Disable=false
                                                                Conf="@editorConf"
                                                                ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                                                ClassName="counterEditor"
                                                                @bind-Value=(contentHolder.content)
                                                            /> 
                                                        </div></td>
                                                    </tr>
                                                    @* Initiate localCount here to button onclick events use the count at create time, not when clicked *@
                                                    var localCount = count;
                                                    var localCountAll = countAll;
                                                    <tr>
                                                        <td>
                                                            @* Spacing *@
                                                        </td>
                                                        @* Button bank to be generated per section.  Using lambda expression to parse value to function *@
                                                        <td><button class="btn btn-outline-warning" @onclick="(() => ClearContent(localCount, localCountAll))">Clear</button>
                                                        <button class="btn btn-outline-danger" @onclick="(() => RemoveSection(localCountAll))">Delete</button>
                                                        <button class="btn btn-outline-primary" @onclick="(() => Edit(localCount, localCountAll))" hidden="@IsEditing[localCount]">Edit</button>
                                                        <button class="btn btn-outline-primary" @onclick="(() => Save(localCount, username!))" hidden="@(!IsEditing[localCount])">Save</button>
                                                        <button class="btn btn-outline-primary" @onclick="(() => Cancel(localCount, localCountAll))" hidden="@(!IsEditing[localCount])">Cancel</button></td>
                                                    </tr>
                                                }
                                                @* Increment global count *@
                                                count++;
                                            }
                                            else if (type == contentHolder.page && sections == "all" || type == null )
                                            {
                                                @if (type == null)
                                                {
                                                    type = "Misc (autoselected as missing type)";
                                                }
                                                if (inline == true)
                                                {
                                                    var localCount = count;
                                                    <tr>
                                                        @* Currently showing all details about the section, but once I split into multiple pages, this will likley be hidden *@
                                                        <td><p>@contentHolder.page: <small class="text-muted">@contentHolder.section</small></p></td>
                                                        @* When IsEditing is true, render the WYSIWYG editor, i'm using TinyMCE *@
                                                        <td><div class="dotted-lines tinymce-editor" @onfocusout="(() => Save(localCount, username!))">
                                                            <Editor
                                                                Id="@count.ToString()"
                                                                Inline=true
                                                                CloudChannel="5"
                                                                Disable=false
                                                                Conf="@editorConfInline"
                                                                ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                                                ClassName="counterEditor"
                                                                @bind-Value=(contentHolder.content)
                                                            /> 
                                                        </div></td>
                                                    </tr>
                                                }
                                                else
                                                {
                                                    <tr>
                                                        @* Currently showing all details about the section, but once I split into multiple pages, this will likley be hidden *@
                                                        <td><p>@contentHolder.page: <small class="text-muted">@contentHolder.section</small></p></td>
                                                        @* Render the de-serialized JSON string as HTML, including styling.  I need some sanitisation here but AntiXss from Microsoft is broken ATM... *@
                                                        <td hidden="@IsEditing![count]">@(new MarkupString(@contentHolder.content!))</td>
                                                        @* When IsEditing is true, render the WYSIWYG editor, i'm using TinyMCE *@
                                                        <td hidden="@(!IsEditing[count])"><div class="dotted-lines tinymce-editor">
                                                            <Editor
                                                                Id="@count.ToString()"
                                                                Inline=false
                                                                CloudChannel="5"
                                                                Disable=false
                                                                Conf="@editorConf"
                                                                ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                                                ClassName="counterEditor"
                                                                @bind-Value=(contentHolder.content)
                                                            /> 
                                                        </div></td>
                                                    </tr>
                                                    @* Initiate localCount here so button onclick events use the count at create time, not when clicked *@
                                                    var localCount = count;
                                                    var localCountAll = countAll;
                                                    <tr>
                                                        <td>
                                                            @* Spacing *@
                                                        </td>
                                                        @* Button bank to be generated per section.  Using lambda expression to parse value to function *@
                                                        <td><button class="btn btn-outline-warning" @onclick="(() => ClearContent(localCount, localCountAll))">Clear</button>
                                                        <button class="btn btn-outline-danger" @onclick="(() => RemoveSection(localCountAll))">Delete</button>
                                                        <button class="btn btn-outline-primary" @onclick="(() => Edit(localCount, localCountAll))" hidden="@IsEditing[localCount]">Edit</button>
                                                        <button class="btn btn-outline-primary" @onclick="(() => Save(localCount, username!))" hidden="@(!IsEditing[localCount])">Save</button>
                                                        <button class="btn btn-outline-primary" @onclick="(() => Cancel(localCount, localCountAll))" hidden="@(!IsEditing[localCount])">Cancel</button></td>
                                                    </tr>
                                                }
                                                @* Increment global count *@
                                                count++;
                                            }
                                            else if (type == "all")
                                            {
                                                @* There is a way to do this so the sections appear in order.  Maybe if the Type in types foreach was outside the main foreach? *@
                                                @foreach (var Type in types)
                                                {
                                                    @if ( contentHolder.page == Type )
                                                    {
                                                        if (inline == true)
                                                        {
                                                            var localCount = count;
                                                            <tr>
                                                                @* Currently showing all details about the section, but once I split into multiple pages, this will likley be hidden *@
                                                                <td><p>@contentHolder.page: <small class="text-muted">@contentHolder.section</small></p></td>
                                                                @* When IsEditing is true, render the WYSIWYG editor, i'm using TinyMCE *@
                                                                <td><div class="dotted-lines tinymce-editor" @onfocusout="(() => Save(localCount, username!))">
                                                                    <Editor
                                                                        Id="@count.ToString()"
                                                                        Inline=true
                                                                        CloudChannel="5"
                                                                        Disable=false
                                                                        Conf="@editorConfInline"
                                                                        ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                                                        ClassName="counterEditor"
                                                                        @bind-Value=(contentHolder.content)
                                                                    /> 
                                                                </div></td>
                                                            </tr>
                                                        }
                                                        else
                                                        {
                                                             <tr>
                                                                @* Currently showing all details about the section, but once I split into multiple pages, this will likley be hidden *@
                                                                <td><p>@contentHolder.page: <small class="text-muted">@contentHolder.section</small></p></td>
                                                                @* Render the de-serialized JSON string as HTML, including styling.  I need some sanitisation here but AntiXss from Microsoft is broken ATM... *@
                                                                <td hidden="@IsEditing![count]">@(new MarkupString(@contentHolder.content!))</td>
                                                                @* When IsEditing is true, render the WYSIWYG editor, i'm using TinyMCE *@
                                                                <td hidden="@(!IsEditing[count])"><div class="dotted-lines tinymce-editor">
                                                                    <Editor
                                                                        Id="@count.ToString()"
                                                                        Inline=false
                                                                        CloudChannel="5"
                                                                        Disable=false
                                                                        Conf="@editorConf"
                                                                        ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                                                        ClassName="counterEditor"
                                                                        @bind-Value=(contentHolder.content)
                                                                    /> 
                                                                </div></td>
                                                            </tr>
                                                            @* Initiate localCount here to button onclick events use the count at create time, not when clicked *@
                                                            var localCount = count;
                                                            var localCountAll = countAll;
                                                            <tr>
                                                                <td>
                                                                    @* Spacing *@
                                                                </td>
                                                                @* Button bank to be generated per section.  Using lambda expression to parse value to function *@
                                                                <td><button class="btn btn-outline-warning" @onclick="(() => ClearContent(localCount, localCountAll))">Clear</button>
                                                                <button class="btn btn-outline-danger" @onclick="(() => RemoveSection(localCountAll))">Delete</button>
                                                                <button class="btn btn-outline-primary" @onclick="(() => Edit(localCount, localCountAll))" hidden="@IsEditing[localCount]">Edit</button>
                                                                <button class="btn btn-outline-primary" @onclick="(() => Save(localCount, username!))" hidden="@(!IsEditing[localCount])">Save</button>
                                                                <button class="btn btn-outline-primary" @onclick="(() => Cancel(localCount, localCountAll))" hidden="@(!IsEditing[localCount])">Cancel</button></td>
                                                            </tr>
                                                        }
                                                        @* Increment global count *@
                                                        count++;
                                                    }
                                                }
                                            }
                                            else if (type == "Search")
                                            {
                                                if (contentHolder.section!.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || contentHolder.content!.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                                                {
                                                    if (inline == true)
                                                    {
                                                        var localCount = count;
                                                        <tr>
                                                            @* Currently showing all details about the section, but once I split into multiple pages, this will likley be hidden *@
                                                            <td><p>@contentHolder.page: <small class="text-muted">@contentHolder.section</small></p></td>
                                                            @* When IsEditing is true, render the WYSIWYG editor, i'm using TinyMCE *@
                                                            <td>
                                                                <div class="dotted-lines tinymce-editor" @onfocusout="(() => Save(localCount, username!))">
                                                                    <Editor Id="@count.ToString()"
                                                                        Inline=true
                                                                        CloudChannel="5"
                                                                        Disable=false
                                                                        Conf="@editorConfInline"
                                                                        ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                                                        ClassName="counterEditor"
                                                                        @bind-Value=(contentHolder.content) />
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    }
                                                    else
                                                    {
                                                        <tr>
                                                            @* Currently showing all details about the section, but once I split into multiple pages, this will likley be hidden *@
                                                            <td><p>@contentHolder.page: <small class="text-muted">@contentHolder.section</small></p></td>
                                                            @* Render the de-serialized JSON string as HTML, including styling.  I need some sanitisation here but AntiXss from Microsoft is broken ATM... *@
                                                            <td hidden="@IsEditing![count]">@(new MarkupString(@contentHolder.content!))</td>
                                                            @* When IsEditing is true, render the WYSIWYG editor, i'm using TinyMCE *@
                                                            <td hidden="@(!IsEditing[count])">
                                                                <div class="dotted-lines tinymce-editor">
                                                                    <Editor Id="@count.ToString()"
                                                                        Inline=false
                                                                        CloudChannel="5"
                                                                        Disable=false
                                                                        Conf="@editorConf"
                                                                        ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                                                        ClassName="counterEditor"
                                                                        @bind-Value=(contentHolder.content) />
                                                                </div>
                                                            </td>
                                                        </tr>
                                                        @* Initiate localCount here to button onclick events use the count at create time, not when clicked *@
                                                        var localCount = count;
                                                        var localCountAll = countAll;
                                                        <tr>
                                                            <td>
                                                                @* Spacing *@
                                                            </td>
                                                            @* Button bank to be generated per section.  Using lambda expression to parse value to function *@
                                                            <td>
                                                                <button class="btn btn-outline-warning" @onclick="(() => ClearContent(localCount, localCountAll))">Clear</button>
                                                                <button class="btn btn-outline-danger" @onclick="(() => RemoveSection(localCountAll))">Delete</button>
                                                                <button class="btn btn-outline-primary" @onclick="(() => Edit(localCount, localCountAll))" hidden="@IsEditing[localCount]">Edit</button>
                                                                <button class="btn btn-outline-primary" @onclick="(() => Save(localCount, username!))" hidden="@(!IsEditing[localCount])">Save</button>
                                                                <button class="btn btn-outline-primary" @onclick="(() => Cancel(localCount, localCountAll))" hidden="@(!IsEditing[localCount])">Cancel</button>
                                                            </td>
                                                        </tr>
                                                    }
                                                    @* Increment global count *@
                                                    count++;
                                                }
                                            }
                                        countAll++;
                                        }
                                        @if (type == "add" && IsEditing![0] == true)
                                        {
                                            if (inline == true)
                                            {
                                                count = 0;
                                                var localCount = count;
                                                var localCountAll = countAll;
                                                <tr>
                                                    <td>New Section: </td>
                                                    <td><div class="dotted-lines tinymce-editor" @onfocusout="(() => Save(localCount, username!))">
                                                        <Editor
                                                            Id="@count.ToString()"
                                                            Inline=true
                                                            CloudChannel="5"
                                                            Disable=false
                                                            Conf="@editorConfInline"
                                                            ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                                            ClassName="counterEditor"
                                                            @bind-Value=(contentHolderList.Last().content)
                                                        /> 
                                                    </div></td>
                                                </tr>
                                            }
                                            else
                                            {
                                                var localCount = 0;
                                                count = 0;
                                                var localCountAll = countAll;
                                                <tr>
                                                    <td>New Section: </td>
                                                    @* Render the de-serialized JSON string as HTML, including styling.  I need some sanitisation here but AntiXss from Microsoft is broken ATM... *@
                                                    <td hidden="@IsEditing[count]">@(new MarkupString(contentHolderList.Last().content!))</td>
                                                    <td hidden="@(!IsEditing[count])"><div class="dotted-lines tinymce-editor">
                                                        <Editor
                                                            Id="@count.ToString()"
                                                            Inline=false
                                                            CloudChannel="5"
                                                            Disable=false
                                                            Conf="@editorConf"
                                                            ApiKey="7so5re0foy5ocvnv7m3m3rznoi0hiar7wrg9w0hk2bkgfshl"
                                                            ClassName="counterEditor"
                                                            @bind-Value=(contentHolderList.Last().content)
                                                        /> 
                                                    </div></td>
                                                </tr>
                                                <tr>
                                                    <td>
                                                        @* Spacing *@
                                                    </td>
                                                    @* Button bank to be generated per section.  Using lambda expression to parse value to function *@
                                                    <td><button class="btn btn-outline-warning" @onclick="()=>contentHolderList.Last().content = clearText">Clear</button>
                                                    <button class="btn btn-outline-primary" @onclick="(() => Save(localCount, username!))" hidden="@(!IsEditing[localCount])">Save</button>
                                                    <button class="btn btn-outline-primary" @onclick="(() => CancelNew(localCount))" hidden="@(!IsEditing[localCount])">Cancel</button></td>
                                                </tr>
                                            }
                                            countAll++;
                                        }
                                    </tbody>
                                </table>
                            }
                        </div>
                    </div>
                    <div class="col">
                        @if (type == "add")
                        {
                        @* Section for adding a new section from user selection *@
                        @* Using bootstraps grid layout for formatting *@
                            <div class="bg-dark text-primary container-fluid">
                                <div class="row">
                                    <div class="col-6">
                                        @* Dropdown for section type *@
                                        <div class="form-group">
                                            <label class="form-label bg-dark text-light" for="sectionDropdown">Select New Section Type:</label>
                                            <select class="form-control form-control-dark bg-dark text-primary border-primary" id="sectionDropdown" @bind="sectionDropdown">
                                                <option value="Default" disabled selected>Select a type</option>
                                                <option value="Hardware">Hardware</option>
                                                <option value="Software">Software</option>
                                                <option value="Misc">Misc</option>
                                            </select>
                                        </div>
                                        @* Text field for section name *@
                                        <div class="form-group bg-dark text-primary">
                                            <label class="form-label bg-dark text-light mt-1" for="sectionContent">Section Name:</label>
                                            <input type="text" class="form-control form-control-dark bg-dark text-primary border-primary" id="sectionContent" placeholder="Name of the new section" @bind="sectionName">
                                        </div>
                                        @* Add section button *@
                                        <button class="btn btn-outline-primary mt-2" @onclick="(() => AddNewSection())">Add New Section</button>
                                    </div>
                                    <div class="col-6">
                                        @* Spacing *@
                                    </div>
                                </div>
                            </div>            
                        }
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        @* If user is not authorized, call RedirectHome *@
        <p>Please Login to see this Content.  Redirecting...</p>
        @if(!context.User.Identity!.IsAuthenticated)
        {
            RedirectHome();
        }
    </NotAuthorized>
</AuthorizeView>
@code {
    @* Declare custom object array *@
    public contentHolder[]? contentHolderList;
    public List<contentHolder> searchResults = new List<contentHolder>();
    public string? searchTerm { get; set; }
    private string[] types = {"Hardware", "Software", "Misc"};
    
    //public contentHolder[] ContentHolderListState;
    @* Declare var for current user selection *@
    [Parameter]
    public string? type { get; set; }
    [Parameter]
    public string? sections { get; set; }
    @* Declare Global Vars *@
    private bool? inline { get; set; } = false;
    private string[]? initialContent;
    private bool[]? IsEditing;
    private string? sectionDropdown;
    private string? sectionName;
    @* Declare/Initialize variables for API communication *@
    private string? repoName = "WikiData";
    private string? userName = "SamDenton";
    private string? token;
    private string? commitText = "Test From Wiki";
    private string? newSHA;
    @* Initialize page.  Using Async initialization as I want to load content from API before rendering *@
    protected override async Task OnInitializedAsync()
    {
    @* Get API token from external file.  Token.txt is not included in Commits.  Should probably do the same with my TinyMCE token *@
        var getFromTokens = await Http.GetAsync("Token.txt");
        token = await getFromTokens.Content.ReadAsStringAsync();
    @* Call method to make GET request *@
        contentHolderList = await GetContentFromGitHubRepo<contentHolder>(userName!, repoName!, token);
        myStateContainer.OnStateChange += StateHasChanged;
        //myStateContainer.SetValue();
    @* Initialize control variables after populating contentHolderList *@
        initialContent = new string[contentHolderList.Length];
        IsEditing = new bool[contentHolderList.Length];
    @* Add event handler to nagigation change event to reset IsEditing array *@
        Navigation.LocationChanged += LocationChanged!;
        base.OnInitialized();
    }
    @* Function to trigger when content is refreshed.  This code is to solve an issue where swtiching between pages and inline editor could leave a section edited, and it would show in the add section page *@
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        ClearIsEditingArray();
    }
    private void ClearIsEditingArray()
    {
                if (IsEditing != null)
        {
            for (int i = 0; i < IsEditing!.Length; i++)
            {
                IsEditing[i] = false;
                Console.WriteLine(i +""+ IsEditing[i] + " Out of: " + IsEditing.Length);
                StateHasChanged();
            }
        }
    }
    private void SearchTermChanged()
    {
        if (type != "Search")
        {
            if (searchTerm!.Length > 1)
            {
                Navigation.NavigateTo($"/mainContent/Search");
            }
        }
        else
        {
            if (String.IsNullOrWhiteSpace(searchTerm))
            {
                Navigation.NavigateTo($"/mainContent/all");
            }
        }

    }
    @* Currently actually redirects to Microsoft Authentication popup, but might change this to home *@
    protected private void RedirectHome()
    {
        Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
    }
    private void navigateToSection(string type, string section)
    {
        Navigation.NavigateTo($"/mainContent/{type}/{section}");
    }
    @* Method to clear specific sections content *@
    private void ClearContent(int localSectionNo, int globalSectionNo)
    {
        Console.WriteLine("Local: " + localSectionNo + "Global: " + globalSectionNo);
        contentHolderList![globalSectionNo].content = "";
        IsEditing![localSectionNo] = true;
    }
    @* Set selected sections IsEditing to True, which should render the editor *@
    private void Edit(int localSectionNo, int globalSectionNo)
    {
        Console.WriteLine("Local: " + localSectionNo + "Global: " + globalSectionNo);
    @* When you click edit, save the current state so 'Cancel' button can revert changes *@
        initialContent![globalSectionNo] = contentHolderList![globalSectionNo].content!;
        IsEditing![localSectionNo] = true;
    }
    @* Set selected section's IsEditing to false, then call method to PUT new JSON to GitHub.  Should render updated content to DOM *@
    private async void Save(int sectionNo, string username)
    {
        IsEditing![sectionNo] = false;
        commitText = "Content change made by: " + username + "";
    @* Update the array for navigation *@
        myStateContainer.SetValue();
        myStateContainer.OnStateChange += RefreshMe;
    @* Serialize current object array to a JSON String *@
        var jsonString = JsonConvert.SerializeObject(contentHolderList);
        await UpdateJSONOnGitHub(jsonString, repoName!, userName!, token!, commitText!, newSHA!);
    }
    private void RefreshMe()
    {
        StateHasChanged();
    }
    @* Set sections IsEditing to false, and set the content to the stored previous state *@
    private async void Cancel(int localSectionNo, int globalSectionNo)
    {
        Console.WriteLine("Local: " + localSectionNo + "Global: " + globalSectionNo);
    @* If statement needed here so canceling on a newly added section will remove it *@
        if (initialContent![globalSectionNo] != null)
        {
            contentHolderList![globalSectionNo].content = initialContent[globalSectionNo];
        }
        else
        {
            await RemoveSection(contentHolderList!.Length - 1);
        }
        IsEditing![localSectionNo] = false;
    }
    private void CancelNew(int localSectionNo)
    {
        IsEditing![localSectionNo] = false;
    }
    @* Add a new object to my array from user input *@
    private void AddNewSection()
    {
    @* Using data binding to tie user selection to these vars *@
        var type = sectionDropdown;
        var name = sectionName;
        if (!String.IsNullOrWhiteSpace(type) && !String.IsNullOrWhiteSpace(name)) @* type != null && type != "" && type != " " && name != null && name != "" && name != " " *@
        {
    @* Best way to add to an array is to resize then initialize the new index *@
            Array.Resize(ref contentHolderList, contentHolderList!.Length + 1);
            Array.Resize(ref IsEditing, IsEditing!.Length + 1);
            contentHolderList[contentHolderList.Length - 1] = new contentHolder { 
                page = type, 
                section = name, 
                content = "<p>Enter some details about " + name + " here.</p>" 
            };
            ReInitialize();
    @* Initialize new index on control variables *@
            IsEditing[0] = true;
        }
        else
        {
    @* Should add an alert or style change to the entry box here to show a value is needed *@
        }
    }
    @* Method to remove selected section *@
    private async Task RemoveSection(int sectionNo)
    {
        if (contentHolderList!.Length > 1)
        {
    @* Easiest way to remove an element from middle of array is to build a new array from the old, skipping the line to remove, then setting it back to main array *@
            contentHolder[] newArray = new contentHolder[contentHolderList.Length - 1];
            int newArrayIndex = 0;
            for (int i = 0; i < contentHolderList.Length; i++)
            {
                if (i != sectionNo)
                {
                    newArray[newArrayIndex++] = contentHolderList[i];
                }
            }
            contentHolderList = newArray;
            ReInitialize();
            myStateContainer.SetValue();
            myStateContainer.OnStateChange += RefreshMe;
    @* Serialize and upload to GitHub *@
            var jsonString = JsonConvert.SerializeObject(contentHolderList);
            await UpdateJSONOnGitHub(jsonString, repoName!, userName!, token!, commitText!, newSHA!);
        }
    }
    @* This method should reset lengths of different variables and re-load the page.  Called after a number of state changes *@
    private void ReInitialize()
    {
        initialContent = new string[contentHolderList!.Length];
        IsEditing = new bool[contentHolderList.Length];
        StateHasChanged();
    }
    @* Method for uploading content to GitHub API via PUT *@
    private async Task UpdateJSONOnGitHub(string jsonString, string repositoryName, string username, string token, string commitMessage, string sha)
    {
    @* Since I'm injecting a Http client for Token GET I dont know if i need to declare new clients for each method, but its working *@
        using (var client = new HttpClient())
        {
    @* Initialize the HttpClient object with an authorization header and desired content type *@
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", token);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.github+json"));
    @* Define the request body, encoding the content string as base64 *@
            var body = new
            {
                message = commitMessage,
                content = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString)),
                sha = sha
            };
    @* Serialize the body object and encode *@
            var json = JsonConvert.SerializeObject(body);
            var contentAndMessage = new StringContent(json, Encoding.UTF8, "application/json");
    @* Send the PUT request to the GitHub API *@
            var response = await client.PutAsync($"https://api.github.com/repos/{username}/{repositoryName}/contents/data.json", contentAndMessage);
            var responceHeaders = await response.Content.ReadAsStringAsync();
    @* Get new sha value from PUT response headers *@
            var gitContent = JsonConvert.DeserializeObject<Root>(responceHeaders);
            newSHA = gitContent!.content!.sha!;
    @* Ensure the request was successful *@
            response.EnsureSuccessStatusCode();
        }
    }
    @* Retrieve content from GitHub as a JSON string *@
    public async Task<T[]> GetContentFromGitHubRepo<T>(string username, string repositoryName, string token)
    {
        using (var client = new HttpClient())
        {
    @* Initialize the HttpClient object with an authorization header and desired content type *@
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", token);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.github+json"));
    @* Send the GET request to the GitHub API *@
            var response = await client.GetAsync($"https://api.github.com/repos/{username}/{repositoryName}/contents/data.json");
    @* Read the response content, parse the content and convert it from base64, then de-serialize the content with my custom class *@
            var content = await response.Content.ReadAsStringAsync();
            var gitContent = JsonConvert.DeserializeObject<Content>(content);
            var contentBytes = Convert.FromBase64String(gitContent!.content!);
            var jsonContent = Encoding.UTF8.GetString(contentBytes);
            var array = JsonConvert.DeserializeObject<T[]>(jsonContent);
    @* Get the sha of the retrieved file *@ 
            newSHA = gitContent.sha!;
    @* Not using this return.  I might be able to remove the return type <T[]> from the method deceleration *@
            return array!;
        }
    }
    @* Not using this method currently, but might be useful if I split content across pages / files on GitHub *@
    @* If I end up using this method, I should re-write to match the format of my GET and PUT methods*@
    private async Task DeleteFile(string repositoryName, string username, string token, string commitMessage, string sha)
    {
        var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", token);
        var content = new StringContent("{\"message\":\"" + commitMessage + "\",\"sha\":\"" + sha + "\"}", Encoding.UTF8, "application/json");
        var response = await client.DeleteAsync($"https://api.github.com/repos/{username}/{repositoryName}/contents/data.json");
        if (!response.IsSuccessStatusCode)
        {
            throw new Exception("Error deleting file: " + response.ReasonPhrase);
        }
    }
    public void Dispose()
    {
        //myStateContainer.OnStateChange -= StateHasChanged;
    }
    @* Class for creating custom objects from JSON string *@
    public class contentHolder
    {
        public string? page { get; set; }

        public string? section { get; set; }

        public string? content { get; set; }
    }
    @* Class for creating an object from GET response. content here will still be JSON string, so needs de-serializing further using previous class *@
    public class Content
    {
        public string? content { get; set; }
        public string? encoding { get; set; }
        public int? size { get; set; }
        public string? sha { get; set; }
    }
    @* Class structure to get sha from PUT response headers *@
    public class Root
    {
        public PutResponse? content { get; set; }
    }
    public class PutResponse
    {
        public string? sha { get; set; }
        public string? content { get; set; }
        public string? commit { get; set; }
        public string? url { get; set; }
    }
    @* Define properties for TinyMCE WYSIWYG editor *@
    private Dictionary<string, object> editorConf = new Dictionary<string, object>  {
        {"menubar", "edit insert format table tools help"}, 
    @* Would like to condence toolbar in to a few dropdowns, but converting JS syntax to C# is a pain *@
        {"toolbar", "undo redo | bold italic underline strikethrough | fontfamily fontsize blocks | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl"},
        {"plugins", "autolink media link image table lists advlist code emoticons wordcount importcss autoresize quickbars codesample help"}, //imagetools spellchecker - Removed as imagetools now premium and spellchecker depricated
        {"contextmenu", "link image imagetools table lists undo redo | inserttable | cell row column deletetable | help"},
        {"table_toolbar", "tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol"},
        {"quickbars_selection_toolbar", "bold italic underline | fontfamily fontsize blocks | bullist numlist | blockquote quicklink"},
        {"quickbars_insert_toolbar", "quicktable image media codesample" },
        {"toolbar_mode", "floating"},
        {"toolbar_location", "top"},
        {"width", "100%"},
        {"min_width", "100%"},
        {"height", "100%"}, @* Using autosize plugin, height property should be ignored. Min_height still respected *@
        {"min_height", 100},
        {"autoresize_bottom_margin", 30},
        {"skin", "oxide-dark"},
        {"content_css", "dark"},
        {"autosave_ask_before_unload", "true"},
        {"resize", "both"} @* Allows user to resize using bottom right corner.  Should still respect min height and width *@
    };
    private Dictionary<string, object> editorConfInline = new Dictionary<string, object>  {
    @* Would like to condence toolbar in to a few dropdowns, but converting JS syntax to C# is a pain *@
        {"plugins", "autolink media link image table lists advlist code emoticons wordcount importcss autoresize quickbars codesample help"}, //imagetools spellchecker - Removed as imagetools now premium and spellchecker depricated
        {"contextmenu", " link image imagetools table lists undo redo | inserttable | cell row column deletetable | help"},
        {"table_toolbar", "tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol"},
        {"quickbars_selection_toolbar", "undo redo | bold italic underline strikethrough | fontfamily fontsize | blocks | bullist numlist | alignleft aligncenter alignright alignjustify | outdent indent | forecolor backcolor | blockquote quicklink | charmap emoticons | print | insertfile image media template link anchor codesample | removeformat"},
        {"toolbar", "false"},
        {"menubar", "false"},
        {"block_formats", "Paragraph=p; Heading 1=h1; Heading 2=h2; Heading 3=h3; Heading 4=h4; Heading 5=h5; Heading 6=h6;"},
        {"quickbars_insert_toolbar", "quicktable image media codesample" },
        {"width", "100%"},
        {"min_width", "100%"},
        {"height", "100%"}, @* Using autosize plugin, height property should be ignored. Min_height still respected *@
    {"min_height", 100},
        {"autoresize_bottom_margin", 30},
        {"skin", "oxide-dark"},
        {"content_css", "dark"},
        {"autosave_ask_before_unload", "true"},
        {"resize", "both"} 
    @* Allows user to resize using bottom right corner.  Should still respect min height and width *@
    };

    @*{"toolbar_sticky", "true"},
        {"toolbar_sticky_offset", "500"},
        {"toolbar_location", "auto"},*@
}
