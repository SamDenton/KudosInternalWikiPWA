@inject NavigationManager navigationManager
@inject contentHolder contentHolder
@inject MyStateContainer myStateContainer
@using System.Net
@using System.Net.Http;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;
@inject HttpClient Http;

<div class="ps-3 navbar">
    <div class="container-fluid">
        <h4 class=".kudosText">
            Kudos <small class="text-muted">Internal Wiki</small>
            <button title="Navigation menu" class="navbar-toggler btn-light" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon">\/</span>
            </button>
        </h4>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column text-light">
        <div class="nav-item px-3">
            <NavLink class="nav-link text-light" @onclick="(() => resetNav())" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link text-light" @onclick="()=>expandSubNav = !expandSubNav"> @* href="mainContent/Home/Home" *@
                <span class="oi oi-list-rich" aria-hidden="true"></span> Wiki Content
            </NavLink>
        </div>
        @if (expandSubNav)
        {
            <div class="nav-item px-3" @onclick="NavDetectorType">
                <select class="form-control form-control-dark bg-dark text-primary border-primary" id="sectionDropdown" @bind="sectionDropdown">
                    <option value="Default" disabled selected>Select a type</option>
                    <option value="Hardware"><span class="oi oi-plus" aria-hidden="true"></span>Hardware</option>
                    <option value="Software"><span class="oi oi-plus" aria-hidden="true"></span>Software</option>
                    <option value="Misc"><span class="oi oi-plus" aria-hidden="true"></span>Misc</option>
                </select>
            </div>
            @if (sectionDropdown == "Hardware")
            {
                <div class="nav-item px-3" @onclick="NavDetector">
                    <select class="form-control form-control-dark bg-dark text-primary border-primary" id="sectionDropdown2" @bind="sectionDropdown2">
                        <option value="Default" disabled selected>Select a section</option>
                        <option value="all">All Hardware</option>
                        @foreach (var contentHolder in contentHolderList)
                        {
                            if (contentHolder.page == "Hardware")
                            {
                                <option value="@contentHolder.section" href="mainContent/@contentHolder.page/@contentHolder.section">@contentHolder.section</option>
                            }
                        }
                    </select>
                </div>
            }
            else if (sectionDropdown == "Software")
            {
                <div class="nav-item px-3" @onclick="NavDetector">
                    <select class="form-control form-control-dark bg-dark text-primary border-primary" id="sectionDropdown2" @bind="sectionDropdown2">
                        <option value="Default" disabled selected>Select a section</option>
                        <option value="all">All Software</option>
                        @foreach (var contentHolder in contentHolderList)
                        {
                            if (contentHolder.page == "Software")
                            {
                                <option value="@contentHolder.section" href="mainContent/@contentHolder.page/@contentHolder.section">@contentHolder.section</option>
                            }
                        }
                    </select>
                </div>
            }
            else if (sectionDropdown == "Misc")
            {
                <div class="nav-item px-3" @onclick="NavDetector">
                    <select class="form-control form-control-dark bg-dark text-primary border-primary" id="sectionDropdown2" @bind="sectionDropdown2">
                        <option value="Default" disabled selected>Select a section</option>
                        <option value="all">All Misc</option>
                        @foreach (var contentHolder in contentHolderList)
                        {
                            if (contentHolder.page == "Misc")
                            {
                                <option value="@contentHolder.section" href="mainContent/@contentHolder.page/@contentHolder.section">@contentHolder.section</option>
                            }
                        }
                    </select>
                </div>
            }
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link text-light" href="mainContent/all" @onclick="(() => resetNav())">
                <span class="oi oi-list-rich" aria-hidden="true"></span> All Sections
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link text-light" href="mainContent/add" @onclick="(() => resetNav())">
                <span class="oi oi-plus" aria-hidden="true"></span> Add New Section
            </NavLink>
        </div>
        @* 
        <div class="nav-item px-3">
            <NavLink class="nav-link text-light" href="InlineTest" @onclick="(() => resetNav())">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Testing Inline Editor
            </NavLink>
        </div>
        *@
    </nav>
</div>
@* Need to add code to detect changing page and colapsing menu *@
@code {

    private contentHolder[]? contentHolderList;

    private bool collapseNavMenu = true;

    private string? sectionDropdown;
    private string? sectionDropdown2;
    private bool expandSubNav;
    private bool falseBool = false;
    private string? NavMenuCssClass => !collapseNavMenu ? "collapse" : null;
    private string repoName = "WikiData";
    private string userName = "SamDenton";
    private string? token;

    protected override async Task OnInitializedAsync()
    {
        var getFromTokens = await Http.GetAsync("Token.txt");
        token = await getFromTokens.Content.ReadAsStringAsync();
        contentHolderList = await GetContentFromGitHubRepo<contentHolder>(userName, repoName, token);
        myStateContainer.OnStateChange += RefreshMe;
    }
    private async void RefreshMe()
    {
        await Task.Delay(1000);
        contentHolderList = await GetContentFromGitHubRepo<contentHolder>(userName, repoName, token);
        Console.WriteLine(contentHolderList.Last().section);
        StateHasChanged();
    }
    public void resetNav()
    {
        expandSubNav = false;
        sectionDropdown = "Default";
        sectionDropdown2 = "Default";
    }
    @* Retrieve content from GitHub as a JSON string *@
    public async Task<T[]> GetContentFromGitHubRepo<T>(string username, string repositoryName, string token)
    {
        using (var client = new HttpClient())
        {
            @* Initialize the HttpClient object with an authorization header and desired content type *@
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", token);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.github+json"));
            @* Send the GET request to the GitHub API *@
            var response = await client.GetAsync($"https://api.github.com/repos/{username}/{repositoryName}/contents/data.json");
            @* Read the response content, parse the content and convert it from base64, then de-serialize the content with my custom class *@
            var content = await response.Content.ReadAsStringAsync();
            var gitContent = JsonConvert.DeserializeObject<Content>(content);
            var contentBytes = Convert.FromBase64String(gitContent.content);
            var jsonContent = Encoding.UTF8.GetString(contentBytes);
            var array = JsonConvert.DeserializeObject<T[]>(jsonContent);
            @* Get the sha of the retrieved file *@ 
            @* newSHA = gitContent.sha; *@
            return array;
        }
    }

    private void NavDetectorType()
    {
        StateHasChanged();
        if (sectionDropdown2 != null && sectionDropdown2 != "")
        {
            sectionDropdown2 = "Default";
        }
    }

    private void NavDetector()
    {
        if (!String.IsNullOrWhiteSpace(sectionDropdown2) && sectionDropdown2 != "Default")
        {
            foreach (var contentHolder in contentHolderList)
            {
                Console.WriteLine("Current section list: " + contentHolder.section);
            }
            Console.WriteLine(sectionDropdown, sectionDropdown2);
            contentNav(sectionDropdown, sectionDropdown2);
        }
    }

    private void expandSubNavInvert()
    {
        // expandSubNav != expandSubNav;
    }
    private void contentNav(string type, string section)
    {
        //type = "Hardware";
        //section = "CMD";
        navigationManager.NavigateTo($"/mainContent/{type}/{section}");
    }
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private void SelectContent(string type, string section)
    {
        // Update the state with the selected values
       // SelectedType = type;
        //SelectedSection = section;
        // Trigger the method to fetch the corresponding content
        //GetContent();
    }
}
